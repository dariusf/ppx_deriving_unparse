type expr =
  | Num of int [@form _1]
  | Plus of expr * expr [@form _1 "+" _2][@prec (left, 3)]
  | Times of expr * expr [@form _1 "*" _2][@prec (left, 4)][@@deriving
                                                             unparse
                                                               {
                                                                 between =
                                                                   " "
                                                               }]
include
  struct
    let _ = fun (_ : expr) -> ()
    let table_expr =
      function
      | Plus _ -> Some (3, (`Infix `Left))
      | Times _ -> Some (4, (`Infix `Left))
      | _ -> None
    let _ = table_expr
    let rec unparse_expr e =
      match e with
      | Num v0 -> string_of_int v0
      | Plus (v0, v1) ->
          String.concat " "
            [if Ppx_deriving_unparse_runtime.noparens table_expr v0 e 0
             then unparse_expr v0
             else Format.sprintf "(%s)" (unparse_expr v0);
            "+";
            if Ppx_deriving_unparse_runtime.noparens table_expr v1 e 1
            then unparse_expr v1
            else Format.sprintf "(%s)" (unparse_expr v1)]
      | Times (v0, v1) ->
          String.concat " "
            [if Ppx_deriving_unparse_runtime.noparens table_expr v0 e 0
             then unparse_expr v0
             else Format.sprintf "(%s)" (unparse_expr v0);
            "*";
            if Ppx_deriving_unparse_runtime.noparens table_expr v1 e 1
            then unparse_expr v1
            else Format.sprintf "(%s)" (unparse_expr v1)]
    let _ = unparse_expr
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
let () =
  let ex1 = Times ((Plus ((Num 1), (Num 2))), (Num 3)) in
  print_endline (unparse_expr ex1)
type party = ((string)[@form _1])[@@deriving unparse]
include
  struct
    let _ = fun (_ : party) -> ()
    let unparse_party e = match e with | v0 -> Fun.id v0
    let _ = unparse_party
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
type channel = ((string)[@form _1])[@@deriving unparse]
include
  struct
    let _ = fun (_ : channel) -> ()
    let unparse_channel e = match e with | v0 -> Fun.id v0
    let _ = unparse_channel
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
type event = (((party * int))[@form _1 _2])[@@deriving unparse]
include
  struct
    let _ = fun (_ : event) -> ()
    let unparse_event e =
      match e with
      | (v0, v1) -> String.concat "" [unparse_party v0; string_of_int v1]
    let _ = unparse_event
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
type global =
  | GComm of party * int * party * channel [@form _1 "-" _2 "->" _3 ": " _4]
  | GSeq of global * global [@form _1 "; " _2][@prec (left, 4)]
  | GPar of global * global [@form _1 " * " _2][@prec (left, 3)]
  | GEnd [@form "end"][@@deriving unparse]
include
  struct
    let _ = fun (_ : global) -> ()
    let table_global =
      function
      | GSeq _ -> Some (4, (`Infix `Left))
      | GPar _ -> Some (3, (`Infix `Left))
      | _ -> None
    let _ = table_global
    let rec unparse_global e =
      match e with
      | GComm (v0, v1, v2, v3) ->
          String.concat ""
            [unparse_party v0;
            "-";
            string_of_int v1;
            "->";
            unparse_party v2;
            ": ";
            unparse_channel v3]
      | GSeq (v0, v1) ->
          String.concat ""
            [if Ppx_deriving_unparse_runtime.noparens table_global v0 e 0
             then unparse_global v0
             else Format.sprintf "(%s)" (unparse_global v0);
            "; ";
            if Ppx_deriving_unparse_runtime.noparens table_global v1 e 1
            then unparse_global v1
            else Format.sprintf "(%s)" (unparse_global v1)]
      | GPar (v0, v1) ->
          String.concat ""
            [if Ppx_deriving_unparse_runtime.noparens table_global v0 e 0
             then unparse_global v0
             else Format.sprintf "(%s)" (unparse_global v0);
            " * ";
            if Ppx_deriving_unparse_runtime.noparens table_global v1 e 1
            then unparse_global v1
            else Format.sprintf "(%s)" (unparse_global v1)]
      | GEnd -> "end"
    let _ = unparse_global
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
let () =
  let ex1 =
    GSeq
      ((GSeq
          ((GComm ("a", 1, "b", "c1")),
            (GPar ((GComm ("a", 1, "b", "c1")), (GComm ("a", 1, "b", "c1")))))),
        GEnd) in
  print_endline (unparse_global ex1)
type term =
  | Lambda of term [@form "\206\187." _1][@prec (left, 2)]
  | Var of int [@form _1]
  | App of term * term [@form _1 " " _2][@prec (left, 3)][@@deriving unparse]
include
  struct
    let _ = fun (_ : term) -> ()
    let table_term =
      function
      | Lambda _ -> Some (2, (`Infix `Left))
      | App _ -> Some (3, (`Infix `Left))
      | _ -> None
    let _ = table_term
    let rec unparse_term e =
      match e with
      | Lambda v0 ->
          String.concat ""
            ["\206\187.";
            if Ppx_deriving_unparse_runtime.noparens table_term v0 e 0
            then unparse_term v0
            else Format.sprintf "(%s)" (unparse_term v0)]
      | Var v0 -> string_of_int v0
      | App (v0, v1) ->
          String.concat ""
            [if Ppx_deriving_unparse_runtime.noparens table_term v0 e 0
             then unparse_term v0
             else Format.sprintf "(%s)" (unparse_term v0);
            " ";
            if Ppx_deriving_unparse_runtime.noparens table_term v1 e 1
            then unparse_term v1
            else Format.sprintf "(%s)" (unparse_term v1)]
    let _ = unparse_term
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
let () =
  let l = App ((Lambda (Var 0)), (Lambda (Var 0))) in
  print_endline (unparse_term l);
  (let l = Lambda (App ((Var 0), (Lambda (Var 0)))) in
   print_endline (unparse_term l))
type re =
  | Emp [@form "\206\181"]
  | Bot [@form "\226\138\165"]
  | Label of string [@form _1]
  | Concat of re * re [@form _1 "\226\139\133" _2][@prec (left, 3)]
  | Star of re [@form _1 "\226\156\173"][@prec (prefix, 4)]
  | Inf of re [@form _1 "\226\136\158"][@prec (prefix, 4)]
  | Omega of re [@form _1 "\207\137"][@prec (prefix, 4)]
  | Or of re * re [@form _1 " \226\136\168 " _2][@prec (left, 2)][@@deriving
                                                                   unparse]
include
  struct
    let _ = fun (_ : re) -> ()
    let table_re =
      function
      | Concat _ -> Some (3, (`Infix `Left))
      | Star _ -> Some (4, `Prefix)
      | Inf _ -> Some (4, `Prefix)
      | Omega _ -> Some (4, `Prefix)
      | Or _ -> Some (2, (`Infix `Left))
      | _ -> None
    let _ = table_re
    let rec unparse_re e =
      match e with
      | Emp -> "\206\181"
      | Bot -> "\226\138\165"
      | Label v0 -> Fun.id v0
      | Concat (v0, v1) ->
          String.concat ""
            [if Ppx_deriving_unparse_runtime.noparens table_re v0 e 0
             then unparse_re v0
             else Format.sprintf "(%s)" (unparse_re v0);
            "\226\139\133";
            if Ppx_deriving_unparse_runtime.noparens table_re v1 e 1
            then unparse_re v1
            else Format.sprintf "(%s)" (unparse_re v1)]
      | Star v0 ->
          String.concat ""
            [if Ppx_deriving_unparse_runtime.noparens table_re v0 e 0
             then unparse_re v0
             else Format.sprintf "(%s)" (unparse_re v0);
            "\226\156\173"]
      | Inf v0 ->
          String.concat ""
            [if Ppx_deriving_unparse_runtime.noparens table_re v0 e 0
             then unparse_re v0
             else Format.sprintf "(%s)" (unparse_re v0);
            "\226\136\158"]
      | Omega v0 ->
          String.concat ""
            [if Ppx_deriving_unparse_runtime.noparens table_re v0 e 0
             then unparse_re v0
             else Format.sprintf "(%s)" (unparse_re v0);
            "\207\137"]
      | Or (v0, v1) ->
          String.concat ""
            [if Ppx_deriving_unparse_runtime.noparens table_re v0 e 0
             then unparse_re v0
             else Format.sprintf "(%s)" (unparse_re v0);
            " \226\136\168 ";
            if Ppx_deriving_unparse_runtime.noparens table_re v1 e 1
            then unparse_re v1
            else Format.sprintf "(%s)" (unparse_re v1)]
    let _ = unparse_re
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
let () =
  print_endline
    (unparse_re
       (Or
          ((Omega (Label "a")),
            (Or
               ((Inf (Concat (Bot, (Label "c")))),
                 (Concat
                    ((Star (Concat (Emp, (Label "b")))), (Star (Label "b")))))))))
